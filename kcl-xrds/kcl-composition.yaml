apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: sqs-composition
  annotations:
    crossplane.io/xrd: edinburgh.cncf
spec:
  compositeTypeRef:
    apiVersion: edinburgh.cncf/v1alpha1
    kind: xQueue
  mode: Pipeline
  pipeline:
  - step: normal
    functionRef:
      name: kcl-function
    input:
      apiVersion: krm.kcl.dev/v1alpha1
      kind: KCLRun
      metadata:
        name: basic
      spec:
        target: PatchResources
        resources:
        - name: queue
          base:
            apiVersion: sqs.aws.upbound.io/v1beta1
            kind: Queue
            spec:
              forProvider:
                region: eu-west-1
              providerConfigRef:
                name: aws-sqs
        - name: policy
          base:
            apiVersion: sqs.aws.upbound.io/v1beta1
            kind: QueuePolicy
            spec:
              forProvider:
                queueUrlRef:
                  name: edinburgh-cncf
                region: eu-west-1
              providerConfigRef:
                name: aws-sqs
        source: |
          import json
          oxr = option("params").oxr
          ocd = option("params").ocds
          roles = oxr?.spec.roles or []
          claimName = oxr.metadata.labels["crossplane.io/claim-name"]

          queue = {
            # Target the queue by name
            metadata.name = "queue"
            spec.forProvider.name: "ks-ds-{}".format(claimName)
          }

          queueResource = ocd?[queue.metadata.name]?.Resource

          policy = {
            metadata.name = "policy"
            spec.forProvider: {
              queueUrlRef.name: queueResource?.metadata?.name
              policy: json.encode({
                Version: '2012-10-17'
                Statement:[{
                  Sid: "example"
                  Effect: "Allow"
                  Principal.AWS: [ r for r in roles]
                  Action: "sqs:SendMessage"
                  Resource: queueResource?.status?.atProvider?.arn
                }]
              })
            }
          }
          items = [ queue, policy ]
  - step: detect-ready-composed-resources
    functionRef:
      name: function-auto-ready

